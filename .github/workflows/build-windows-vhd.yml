name: Build or Test on Hyper-V Runner

on:
  push:
    branches:
      - main
      - user/vhd_pipeline_automation

jobs:
  build-vhd:
    name: Run on Hyper-V Self-Hosted Runner
    runs-on:
      - self-hosted
      - windows
      - hyperv

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display runner info
        run: |
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Labels: $RUNNER_LABELS"
          echo "PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Ensure Hyper-V is available
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            $hv = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All
            if ($hv.State -ne 'Enabled') {
              Write-Error 'Hyper-V feature is not enabled on this host.'
            } else {
              Write-Output 'Hyper-V is enabled.'
            }
          }`"" -Verb RunAs -Wait

      - name: Install Chocolatey if not installed
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Output 'Chocolatey is not installed. Installing...'
              Set-ExecutionPolicy Bypass -Scope Process -Force
              [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
              Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
              Write-Output 'Chocolatey installed successfully.'
            } else {
              Write-Output 'Chocolatey is already installed.'
            }
          }`"" -Verb RunAs -Wait

      - name: Install Packer using Chocolatey
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            if (-not (Get-Command packer -ErrorAction SilentlyContinue)) {
              Write-Output 'Packer is not installed. Installing via Chocolatey...'
              choco install packer -y
              Write-Output 'Packer installed successfully.'
            } else {
              Write-Output 'Packer is already installed.'
            }
          }`"" -Verb RunAs -Wait

      - name: Initialize Packer plugins
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Initializing Packer plugins...'
            packer plugins install github.com/hashicorp/hyperv
          }`"" -Verb RunAs -Wait

      - name: Initialize Packer configuration
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Initializing Packer configuration...'
            packer init windows.json.pkr.hcl
          }`"" -Verb RunAs -Wait

      - name: Format Packer configuration
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Formatting Packer configuration...'
            packer fmt -var-file=windows.auto.pkrvars.hcl windows.json.pkr.hcl
          }`"" -Verb RunAs -Wait

      - name: Validate Packer configuration
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Validating Packer configuration...'
            packer validate .
          }`"" -Verb RunAs -Wait

      - name: Build VHD using Packer
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Building VHD using Packer...'
            packer build -force -var-file='windows.auto.pkrvars.hcl' 'windows.json.pkr.hcl'
          }`"" -Verb RunAs -Wait

      - name: Log Packer Output
        shell: pwsh
        run: |
          Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"& { 
            Write-Output 'Logging Packer output directory...'
            $outputDir = Get-ChildItem -Path './output' -Recurse
            if ($outputDir) {
              Write-Output 'Generated files:'
              $outputDir | ForEach-Object { Write-Output $_.FullName }
            } else {
              Write-Output 'No output files found.'
            }
          }`"" -Verb RunAs -Wait